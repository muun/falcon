
default_platform(:ios)

platform :ios do

  desc "publish to testflight beta"
  lane :prd do

    version_number = get_version_number(target: "Muun")

    # Make sure we're on the right intial state
    ensure_git_branch(branch: "^falcon-#{version_number}$")
    ensure_git_status_clean

    upload_testflight(env: "prod")
  end

  desc "Export an IPA pointing to prod env"
  lane :export_prod_ipa do

    export_ipa(env: "prod")
  end

  desc "publish an internal build pointing to prod by default to testflight. 
  If you want to change the env create a new lane"
  lane :internalPrd do
    ensure_git_status_clean
    upload_testflight(env: "internalPrd")
  end

  desc "publish to testflight dev"
  lane :dev do
    ensure_git_status_clean
    upload_testflight(env: "dev")
  end

  private_lane :set_env do |params|
    env = params[:env]
    sh("sed", "-i", "", "s/static let current: Environment = [^ ]*/static let current: Environment = .#{get_env_for_app_env_case(env:env)}/", "../../app/falcon/core/Environment.swift")
    sh("sed", "-i", "", "s/static let current: Environment = [^ ]*/static let current: Environment = .#{get_env_for_app_env_case(env:env)}/", "../../app/falconPushNotifications/Environment.swift")
    sh("sed", "-i", "", "s/let env = rawValue*/let env = \"#{get_env_for_app_identification(env:env)}\"/", "../../app/falconPushNotifications/Environment.swift")
    sh("sed", "-i", "", "s/let env = rawValue*/let env = \"#{get_env_for_app_identification(env:env)}\"/", "../../app/falcon/Resource/Environment+Extension.swift")
  end

  private_lane :get_env_for_app_identification do |params| # This is because I prefer to avoid changing app id in internal distr because of the extra work (signing and creating the app)
    env = params[:env]
    env == "internalPrd" ? "stg" : env
  end

  private_lane :get_env_for_app_env_case do |params|
    env = params[:env]
    env == "internalPrd" ? "prod" : env
  end

  private_lane :customize_app_for_a_not_production_environment do |params|
    env = params[:env]
    app_identifier = params[:app_identifier]
    extension_identifier = params[:extension_identifier]

    # Change the display name
    update_info_plist(
      plist_path: "falcon/Info.plist",
      display_name: "(#{env.upcase}) Muun",
    )

    # Change the app id
    update_app_identifier(
      plist_path: "falcon/Info.plist",
      app_identifier: app_identifier
    )

    # Update the extensions id
    update_app_identifier(
      plist_path: "falconPushNotifications/Info.plist",
      app_identifier: extension_identifier
    )

    # Replace the bundle id for the iCloud container
    sh("sed", "-i", "", "s/<key>iCloud.[^<]*</<key>iCloud.#{app_identifier}</", "../../app/falcon/Info.plist")
  end

  private_lane :get_app_identifier do |params|
    env = params[:env]
    is_prod = params[:is_prod]
    if is_prod then
      app_identifier = "com.muun.falcon"
    else 
      app_identifier = "com.muun.falcon.#{get_env_for_app_identification(env: env)}"
    end
    app_identifier
  end

  private_lane :update_signing_provisioning do |params|
    app_identifier = params[:app_identifier]
    extension_identifier = params[:extension_identifier]
    muun_email = params[:muun_email]

    sigh(app_identifier: app_identifier, username: muun_email)
    sigh(app_identifier: extension_identifier, username: muun_email)
  end

  private_lane :update_build_number do |params|
    env = params[:env]
    muun_email = params[:muun_email]
    app_identifier = params[:app_identifier]

    if env == "internalPrd" then 
      build_number = latest_testflight_build_number(username: muun_email, app_identifier: app_identifier)
      increment_build_number({
        build_number: build_number + 1
      })
    else
      increment_build_number
    end
  end

  private_lane :upload_build_with_dsyms do |params|
    env = params[:env]
    muun_email = params[:muun_email]
    app_identifier = params[:app_identifier]

    upload_to_testflight(
      username: muun_email,
      app_identifier: app_identifier
    )

    # Download latest dsyms
    download_dsyms(
      username: muun_email,
      app_identifier: app_identifier, 
      build_number: get_build_number
    )

    # Upload them to crashlytics
    upload_symbols_to_crashlytics(
      gsp_path:"falcon/GoogleService-Info-#{get_env_for_app_identification(env: env)}.plist",
      dsym_worker_threads: 10
    )
  end

  private_lane :clean_up_build_dir do |params|
    env = params[:env]
    is_prod = params[:is_prod]

    # Clean up preparing for the tag
    clean_build_artifacts

    if env == "internalPrd" then # Revert version updates for internalPrd
      reset_git_repo(
        force: true
      )
    else
      reset_git_repo(
        force: true,
        files: [
        "../app/falcon/core/Environment.swift",
        "../app/falconPushNotifications/Environment.swift",
        "../app/falcon/Resource/Identifiers.swift",
        "../app/falcon/Resource/Environment+Extension.swift"
        ]
      )
    end

    # Revert the visual name changes
    if !is_prod then
      update_info_plist(
        plist_path: "falcon/Info.plist",
        display_name: "Muun",
      )

      # Change the app id
      update_app_identifier(
        plist_path: "falcon/Info.plist",
        app_identifier: "com.muun.falcon"
      )

      # Update the extensions id
      update_app_identifier(
        plist_path: "falconPushNotifications/Info.plist",
        app_identifier: "com.muun.falcon.falconPushNotifications"
      )

      # Replace the bundle id for the iCloud container
      sh("sed", "-i", "", "s/<key>iCloud.[^<]*</<key>iCloud.com.muun.falcon</", "../../app/falcon/Info.plist")
    end
  end

  private_lane :upload_testflight do |params|
    env = params[:env]
    muun_email = prompt(text: "Your muun email: ")
    is_prod = env == "prod"
    git_prefix = is_prod ? "" : "-#{env}"
    app_identifier = get_app_identifier(env: env, is_prod: is_prod)
    extension_identifier = "#{app_identifier}.falconPushNotifications"

    update_signing_provisioning(app_identifier: app_identifier,
                                extension_identifier: extension_identifier,
                                muun_email: muun_email)

    set_env(env: env)

    sh("sed", "-i", "", "s/static let bundleId = \"[^\"]*\"/static let bundleId = \"#{app_identifier}\"/", "../../app/falcon/Resource/Identifiers.swift")

    if !is_prod then
      customize_app_for_a_not_production_environment(env: env, 
                                                     app_identifier: app_identifier,
                                                     extension_identifier: extension_identifier)
    end

    update_build_number(env: env, muun_email: muun_email, app_identifier: app_identifier)

    version_number = get_version_number(target: "Muun")

    build_app(
      scheme: "Muun", 
      workspace: "falcon.xcworkspace", 
      include_symbols: true,
      export_method: "app-store"
    )
    
    upload_build_with_dsyms(env: env, muun_email: muun_email, app_identifier: app_identifier)

    clean_up_build_dir(env: env, is_prod: is_prod)

    if is_prod then # nothing to commit for envs that are not prod
        # We're done, tag it
        commit_version_bump(
        message: "falcon: Bump version #{get_build_number}",
        xcodeproj: "falcon.xcodeproj"
        )
    end
    add_git_tag(tag: "falcon#{git_prefix}-#{version_number}-#{get_build_number}")
    push_to_git_remote
  end

  desc "Upload symbols to crashlytics"
  lane :upload_crashlytics do

    muun_email = prompt(text: "Your muun email: ")
    app_identifier = "com.muun.falcon"
    build_number = prompt(text: "Build number (ie: 45): ")

    # Download latest dsyms
    download_dsyms(
      username: muun_email,
      app_identifier: app_identifier, 
      build_number: build_number
    )

    # Upload them to crashlytics
    upload_symbols_to_crashlytics(
    	gsp_path:"falcon/GoogleService-Info-#{get_env_for_app_identification(env: env)}.plist",
    	dsym_worker_threads: 10
    )

    # Clean up preparing for the tag
    clean_build_artifacts
  end

  desc "set regtest as env"
  lane :regtest do
    set_env(env: "regtest")
  end

  lane :refresh_dsyms do
    
    download_dsyms                  # Download dSYM files from iTC
    upload_symbols_to_crashlytics   # Upload them to Crashlytics
    clean_build_artifacts           # Delete the local dSYM files
  end

  private_lane :export_ipa do |params|

    env = params[:env]
    muun_email = prompt(text: "Your muun email: ")
    is_prod = env == "prod"
    git_prefix = is_prod ? "" : "-#{env}"
    app_identifier = get_app_identifier(env: env, is_prod: is_prod)
    extension_identifier = "#{app_identifier}.falconPushNotifications"

    update_signing_provisioning(app_identifier: app_identifier,
                                extension_identifier: extension_identifier,
                                muun_email: muun_email)

    set_env(env: env)

    sh("sed", "-i", "", "s/static let bundleId = \"[^\"]*\"/static let bundleId = \"#{app_identifier}\"/", "../../app/falcon/Resource/Identifiers.swift")

    # Avoid build crashing in device farm because of entitlements
    sh("sed", "-i", "", "s/public func setup() { */public func setup() { return/", "../../app/falcon/core/Data/Service/CapabilitiesProvider/ICloudCapabilitiesProvider.swift")

    if !is_prod then
      customize_app_for_a_not_production_environment(env: env, 
                                                     app_identifier: app_identifier,
                                                     extension_identifier: extension_identifier)
    end

    build_app(
      scheme: "Muun", 
      workspace: "falcon.xcworkspace", 
      include_symbols: true,
      export_method: "app-store",
      output_directory:'~/.'
    )

    # Upload them to crashlytics
    upload_symbols_to_crashlytics(
      gsp_path:"falcon/GoogleService-Info-#{get_env_for_app_identification(env: env)}.plist",
      dsym_worker_threads: 10
    )

    puts("------Your IPA should be available on your home directory------")
    puts("------ENV has been changed to prod------")
  end

end
