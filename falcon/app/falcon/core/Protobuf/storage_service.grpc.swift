//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: storage_service.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Proto_StorageServiceClient`, then call methods of this protocol to make API calls.
internal protocol Proto_StorageServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Proto_StorageServiceClientInterceptorFactoryProtocol? { get }

  func save(
    _ request: Proto_SaveRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Proto_SaveRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func get(
    _ request: Proto_GetRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Proto_GetRequest, Proto_GetResponse>

  func delete(
    _ request: Proto_DeleteRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Proto_DeleteRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func saveBatch(
    _ request: Proto_SaveBatchRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Proto_SaveBatchRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func getBatch(
    _ request: Proto_GetBatchRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Proto_GetBatchRequest, Proto_GetBatchResponse>
}

extension Proto_StorageServiceClientProtocol {
  internal var serviceName: String {
    return "proto.StorageService"
  }

  /// Unary call to Save
  ///
  /// - Parameters:
  ///   - request: Request to send to Save.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func save(
    _ request: Proto_SaveRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Proto_SaveRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Proto_StorageServiceClientMetadata.Methods.save.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSaveInterceptors() ?? []
    )
  }

  /// Unary call to Get
  ///
  /// - Parameters:
  ///   - request: Request to send to Get.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func get(
    _ request: Proto_GetRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Proto_GetRequest, Proto_GetResponse> {
    return self.makeUnaryCall(
      path: Proto_StorageServiceClientMetadata.Methods.get.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetInterceptors() ?? []
    )
  }

  /// Unary call to Delete
  ///
  /// - Parameters:
  ///   - request: Request to send to Delete.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func delete(
    _ request: Proto_DeleteRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Proto_DeleteRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Proto_StorageServiceClientMetadata.Methods.delete.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteInterceptors() ?? []
    )
  }

  /// Unary call to SaveBatch
  ///
  /// - Parameters:
  ///   - request: Request to send to SaveBatch.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func saveBatch(
    _ request: Proto_SaveBatchRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Proto_SaveBatchRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Proto_StorageServiceClientMetadata.Methods.saveBatch.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSaveBatchInterceptors() ?? []
    )
  }

  /// Unary call to GetBatch
  ///
  /// - Parameters:
  ///   - request: Request to send to GetBatch.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getBatch(
    _ request: Proto_GetBatchRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Proto_GetBatchRequest, Proto_GetBatchResponse> {
    return self.makeUnaryCall(
      path: Proto_StorageServiceClientMetadata.Methods.getBatch.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetBatchInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Proto_StorageServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Proto_StorageServiceNIOClient")
internal final class Proto_StorageServiceClient: Proto_StorageServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Proto_StorageServiceClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Proto_StorageServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the proto.StorageService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Proto_StorageServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Proto_StorageServiceNIOClient: Proto_StorageServiceClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Proto_StorageServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the proto.StorageService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Proto_StorageServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Proto_StorageServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Proto_StorageServiceClientInterceptorFactoryProtocol? { get }

  func makeSaveCall(
    _ request: Proto_SaveRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Proto_SaveRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func makeGetCall(
    _ request: Proto_GetRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Proto_GetRequest, Proto_GetResponse>

  func makeDeleteCall(
    _ request: Proto_DeleteRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Proto_DeleteRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func makeSaveBatchCall(
    _ request: Proto_SaveBatchRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Proto_SaveBatchRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func makeGetBatchCall(
    _ request: Proto_GetBatchRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Proto_GetBatchRequest, Proto_GetBatchResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Proto_StorageServiceAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Proto_StorageServiceClientMetadata.serviceDescriptor
  }

  internal var interceptors: Proto_StorageServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeSaveCall(
    _ request: Proto_SaveRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Proto_SaveRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Proto_StorageServiceClientMetadata.Methods.save.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSaveInterceptors() ?? []
    )
  }

  internal func makeGetCall(
    _ request: Proto_GetRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Proto_GetRequest, Proto_GetResponse> {
    return self.makeAsyncUnaryCall(
      path: Proto_StorageServiceClientMetadata.Methods.get.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetInterceptors() ?? []
    )
  }

  internal func makeDeleteCall(
    _ request: Proto_DeleteRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Proto_DeleteRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Proto_StorageServiceClientMetadata.Methods.delete.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteInterceptors() ?? []
    )
  }

  internal func makeSaveBatchCall(
    _ request: Proto_SaveBatchRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Proto_SaveBatchRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Proto_StorageServiceClientMetadata.Methods.saveBatch.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSaveBatchInterceptors() ?? []
    )
  }

  internal func makeGetBatchCall(
    _ request: Proto_GetBatchRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Proto_GetBatchRequest, Proto_GetBatchResponse> {
    return self.makeAsyncUnaryCall(
      path: Proto_StorageServiceClientMetadata.Methods.getBatch.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetBatchInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Proto_StorageServiceAsyncClientProtocol {
  internal func save(
    _ request: Proto_SaveRequest,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Proto_StorageServiceClientMetadata.Methods.save.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSaveInterceptors() ?? []
    )
  }

  internal func get(
    _ request: Proto_GetRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Proto_GetResponse {
    return try await self.performAsyncUnaryCall(
      path: Proto_StorageServiceClientMetadata.Methods.get.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetInterceptors() ?? []
    )
  }

  internal func delete(
    _ request: Proto_DeleteRequest,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Proto_StorageServiceClientMetadata.Methods.delete.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteInterceptors() ?? []
    )
  }

  internal func saveBatch(
    _ request: Proto_SaveBatchRequest,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Proto_StorageServiceClientMetadata.Methods.saveBatch.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSaveBatchInterceptors() ?? []
    )
  }

  internal func getBatch(
    _ request: Proto_GetBatchRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Proto_GetBatchResponse {
    return try await self.performAsyncUnaryCall(
      path: Proto_StorageServiceClientMetadata.Methods.getBatch.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetBatchInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Proto_StorageServiceAsyncClient: Proto_StorageServiceAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Proto_StorageServiceClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Proto_StorageServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Proto_StorageServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'save'.
  func makeSaveInterceptors() -> [ClientInterceptor<Proto_SaveRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'get'.
  func makeGetInterceptors() -> [ClientInterceptor<Proto_GetRequest, Proto_GetResponse>]

  /// - Returns: Interceptors to use when invoking 'delete'.
  func makeDeleteInterceptors() -> [ClientInterceptor<Proto_DeleteRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'saveBatch'.
  func makeSaveBatchInterceptors() -> [ClientInterceptor<Proto_SaveBatchRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'getBatch'.
  func makeGetBatchInterceptors() -> [ClientInterceptor<Proto_GetBatchRequest, Proto_GetBatchResponse>]
}

internal enum Proto_StorageServiceClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "StorageService",
    fullName: "proto.StorageService",
    methods: [
      Proto_StorageServiceClientMetadata.Methods.save,
      Proto_StorageServiceClientMetadata.Methods.get,
      Proto_StorageServiceClientMetadata.Methods.delete,
      Proto_StorageServiceClientMetadata.Methods.saveBatch,
      Proto_StorageServiceClientMetadata.Methods.getBatch,
    ]
  )

  internal enum Methods {
    internal static let save = GRPCMethodDescriptor(
      name: "Save",
      path: "/proto.StorageService/Save",
      type: GRPCCallType.unary
    )

    internal static let get = GRPCMethodDescriptor(
      name: "Get",
      path: "/proto.StorageService/Get",
      type: GRPCCallType.unary
    )

    internal static let delete = GRPCMethodDescriptor(
      name: "Delete",
      path: "/proto.StorageService/Delete",
      type: GRPCCallType.unary
    )

    internal static let saveBatch = GRPCMethodDescriptor(
      name: "SaveBatch",
      path: "/proto.StorageService/SaveBatch",
      type: GRPCCallType.unary
    )

    internal static let getBatch = GRPCMethodDescriptor(
      name: "GetBatch",
      path: "/proto.StorageService/GetBatch",
      type: GRPCCallType.unary
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Proto_StorageServiceProvider: CallHandlerProvider {
  var interceptors: Proto_StorageServiceServerInterceptorFactoryProtocol? { get }

  func save(request: Proto_SaveRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  func get(request: Proto_GetRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Proto_GetResponse>

  func delete(request: Proto_DeleteRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  func saveBatch(request: Proto_SaveBatchRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  func getBatch(request: Proto_GetBatchRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Proto_GetBatchResponse>
}

extension Proto_StorageServiceProvider {
  internal var serviceName: Substring {
    return Proto_StorageServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Save":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_SaveRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeSaveInterceptors() ?? [],
        userFunction: self.save(request:context:)
      )

    case "Get":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_GetRequest>(),
        responseSerializer: ProtobufSerializer<Proto_GetResponse>(),
        interceptors: self.interceptors?.makeGetInterceptors() ?? [],
        userFunction: self.get(request:context:)
      )

    case "Delete":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_DeleteRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeDeleteInterceptors() ?? [],
        userFunction: self.delete(request:context:)
      )

    case "SaveBatch":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_SaveBatchRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeSaveBatchInterceptors() ?? [],
        userFunction: self.saveBatch(request:context:)
      )

    case "GetBatch":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_GetBatchRequest>(),
        responseSerializer: ProtobufSerializer<Proto_GetBatchResponse>(),
        interceptors: self.interceptors?.makeGetBatchInterceptors() ?? [],
        userFunction: self.getBatch(request:context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Proto_StorageServiceAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Proto_StorageServiceServerInterceptorFactoryProtocol? { get }

  func save(
    request: Proto_SaveRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty

  func get(
    request: Proto_GetRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Proto_GetResponse

  func delete(
    request: Proto_DeleteRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty

  func saveBatch(
    request: Proto_SaveBatchRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty

  func getBatch(
    request: Proto_GetBatchRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Proto_GetBatchResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Proto_StorageServiceAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Proto_StorageServiceServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Proto_StorageServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Proto_StorageServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Save":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_SaveRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeSaveInterceptors() ?? [],
        wrapping: { try await self.save(request: $0, context: $1) }
      )

    case "Get":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_GetRequest>(),
        responseSerializer: ProtobufSerializer<Proto_GetResponse>(),
        interceptors: self.interceptors?.makeGetInterceptors() ?? [],
        wrapping: { try await self.get(request: $0, context: $1) }
      )

    case "Delete":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_DeleteRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeDeleteInterceptors() ?? [],
        wrapping: { try await self.delete(request: $0, context: $1) }
      )

    case "SaveBatch":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_SaveBatchRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeSaveBatchInterceptors() ?? [],
        wrapping: { try await self.saveBatch(request: $0, context: $1) }
      )

    case "GetBatch":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_GetBatchRequest>(),
        responseSerializer: ProtobufSerializer<Proto_GetBatchResponse>(),
        interceptors: self.interceptors?.makeGetBatchInterceptors() ?? [],
        wrapping: { try await self.getBatch(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

internal protocol Proto_StorageServiceServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'save'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSaveInterceptors() -> [ServerInterceptor<Proto_SaveRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'get'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetInterceptors() -> [ServerInterceptor<Proto_GetRequest, Proto_GetResponse>]

  /// - Returns: Interceptors to use when handling 'delete'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDeleteInterceptors() -> [ServerInterceptor<Proto_DeleteRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'saveBatch'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSaveBatchInterceptors() -> [ServerInterceptor<Proto_SaveBatchRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'getBatch'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetBatchInterceptors() -> [ServerInterceptor<Proto_GetBatchRequest, Proto_GetBatchResponse>]
}

internal enum Proto_StorageServiceServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "StorageService",
    fullName: "proto.StorageService",
    methods: [
      Proto_StorageServiceServerMetadata.Methods.save,
      Proto_StorageServiceServerMetadata.Methods.get,
      Proto_StorageServiceServerMetadata.Methods.delete,
      Proto_StorageServiceServerMetadata.Methods.saveBatch,
      Proto_StorageServiceServerMetadata.Methods.getBatch,
    ]
  )

  internal enum Methods {
    internal static let save = GRPCMethodDescriptor(
      name: "Save",
      path: "/proto.StorageService/Save",
      type: GRPCCallType.unary
    )

    internal static let get = GRPCMethodDescriptor(
      name: "Get",
      path: "/proto.StorageService/Get",
      type: GRPCCallType.unary
    )

    internal static let delete = GRPCMethodDescriptor(
      name: "Delete",
      path: "/proto.StorageService/Delete",
      type: GRPCCallType.unary
    )

    internal static let saveBatch = GRPCMethodDescriptor(
      name: "SaveBatch",
      path: "/proto.StorageService/SaveBatch",
      type: GRPCCallType.unary
    )

    internal static let getBatch = GRPCMethodDescriptor(
      name: "GetBatch",
      path: "/proto.StorageService/GetBatch",
      type: GRPCCallType.unary
    )
  }
}
