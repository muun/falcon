//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: wallet_service.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Rpc_WalletServiceClient`, then call methods of this protocol to make API calls.
internal protocol Rpc_WalletServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Rpc_WalletServiceClientInterceptorFactoryProtocol? { get }

  func deleteWallet(
    _ request: Rpc_EmptyMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Rpc_EmptyMessage, Rpc_OperationStatus>

  func nfcTransmit(
    _ request: Rpc_NfcTransmitRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Rpc_NfcTransmitRequest, Rpc_NfcTransmitResponse>
}

extension Rpc_WalletServiceClientProtocol {
  internal var serviceName: String {
    return "rpc.WalletService"
  }

  /// Unary call to DeleteWallet
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteWallet.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deleteWallet(
    _ request: Rpc_EmptyMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Rpc_EmptyMessage, Rpc_OperationStatus> {
    return self.makeUnaryCall(
      path: Rpc_WalletServiceClientMetadata.Methods.deleteWallet.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteWalletInterceptors() ?? []
    )
  }

  /// V2 - use then discard API
  ///
  /// - Parameters:
  ///   - request: Request to send to NfcTransmit.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func nfcTransmit(
    _ request: Rpc_NfcTransmitRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Rpc_NfcTransmitRequest, Rpc_NfcTransmitResponse> {
    return self.makeUnaryCall(
      path: Rpc_WalletServiceClientMetadata.Methods.nfcTransmit.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNfcTransmitInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Rpc_WalletServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Rpc_WalletServiceNIOClient")
internal final class Rpc_WalletServiceClient: Rpc_WalletServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Rpc_WalletServiceClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Rpc_WalletServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the rpc.WalletService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Rpc_WalletServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Rpc_WalletServiceNIOClient: Rpc_WalletServiceClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Rpc_WalletServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the rpc.WalletService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Rpc_WalletServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Rpc_WalletServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Rpc_WalletServiceClientInterceptorFactoryProtocol? { get }

  func makeDeleteWalletCall(
    _ request: Rpc_EmptyMessage,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Rpc_EmptyMessage, Rpc_OperationStatus>

  func makeNfcTransmitCall(
    _ request: Rpc_NfcTransmitRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Rpc_NfcTransmitRequest, Rpc_NfcTransmitResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Rpc_WalletServiceAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Rpc_WalletServiceClientMetadata.serviceDescriptor
  }

  internal var interceptors: Rpc_WalletServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeDeleteWalletCall(
    _ request: Rpc_EmptyMessage,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Rpc_EmptyMessage, Rpc_OperationStatus> {
    return self.makeAsyncUnaryCall(
      path: Rpc_WalletServiceClientMetadata.Methods.deleteWallet.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteWalletInterceptors() ?? []
    )
  }

  internal func makeNfcTransmitCall(
    _ request: Rpc_NfcTransmitRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Rpc_NfcTransmitRequest, Rpc_NfcTransmitResponse> {
    return self.makeAsyncUnaryCall(
      path: Rpc_WalletServiceClientMetadata.Methods.nfcTransmit.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNfcTransmitInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Rpc_WalletServiceAsyncClientProtocol {
  internal func deleteWallet(
    _ request: Rpc_EmptyMessage,
    callOptions: CallOptions? = nil
  ) async throws -> Rpc_OperationStatus {
    return try await self.performAsyncUnaryCall(
      path: Rpc_WalletServiceClientMetadata.Methods.deleteWallet.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteWalletInterceptors() ?? []
    )
  }

  internal func nfcTransmit(
    _ request: Rpc_NfcTransmitRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Rpc_NfcTransmitResponse {
    return try await self.performAsyncUnaryCall(
      path: Rpc_WalletServiceClientMetadata.Methods.nfcTransmit.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNfcTransmitInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Rpc_WalletServiceAsyncClient: Rpc_WalletServiceAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Rpc_WalletServiceClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Rpc_WalletServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Rpc_WalletServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'deleteWallet'.
  func makeDeleteWalletInterceptors() -> [ClientInterceptor<Rpc_EmptyMessage, Rpc_OperationStatus>]

  /// - Returns: Interceptors to use when invoking 'nfcTransmit'.
  func makeNfcTransmitInterceptors() -> [ClientInterceptor<Rpc_NfcTransmitRequest, Rpc_NfcTransmitResponse>]
}

internal enum Rpc_WalletServiceClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "WalletService",
    fullName: "rpc.WalletService",
    methods: [
      Rpc_WalletServiceClientMetadata.Methods.deleteWallet,
      Rpc_WalletServiceClientMetadata.Methods.nfcTransmit,
    ]
  )

  internal enum Methods {
    internal static let deleteWallet = GRPCMethodDescriptor(
      name: "DeleteWallet",
      path: "/rpc.WalletService/DeleteWallet",
      type: GRPCCallType.unary
    )

    internal static let nfcTransmit = GRPCMethodDescriptor(
      name: "NfcTransmit",
      path: "/rpc.WalletService/NfcTransmit",
      type: GRPCCallType.unary
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Rpc_WalletServiceProvider: CallHandlerProvider {
  var interceptors: Rpc_WalletServiceServerInterceptorFactoryProtocol? { get }

  func deleteWallet(request: Rpc_EmptyMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Rpc_OperationStatus>

  /// V2 - use then discard API
  func nfcTransmit(request: Rpc_NfcTransmitRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Rpc_NfcTransmitResponse>
}

extension Rpc_WalletServiceProvider {
  internal var serviceName: Substring {
    return Rpc_WalletServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "DeleteWallet":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Rpc_EmptyMessage>(),
        responseSerializer: ProtobufSerializer<Rpc_OperationStatus>(),
        interceptors: self.interceptors?.makeDeleteWalletInterceptors() ?? [],
        userFunction: self.deleteWallet(request:context:)
      )

    case "NfcTransmit":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Rpc_NfcTransmitRequest>(),
        responseSerializer: ProtobufSerializer<Rpc_NfcTransmitResponse>(),
        interceptors: self.interceptors?.makeNfcTransmitInterceptors() ?? [],
        userFunction: self.nfcTransmit(request:context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Rpc_WalletServiceAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Rpc_WalletServiceServerInterceptorFactoryProtocol? { get }

  func deleteWallet(
    request: Rpc_EmptyMessage,
    context: GRPCAsyncServerCallContext
  ) async throws -> Rpc_OperationStatus

  /// V2 - use then discard API
  func nfcTransmit(
    request: Rpc_NfcTransmitRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Rpc_NfcTransmitResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Rpc_WalletServiceAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Rpc_WalletServiceServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Rpc_WalletServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Rpc_WalletServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "DeleteWallet":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Rpc_EmptyMessage>(),
        responseSerializer: ProtobufSerializer<Rpc_OperationStatus>(),
        interceptors: self.interceptors?.makeDeleteWalletInterceptors() ?? [],
        wrapping: { try await self.deleteWallet(request: $0, context: $1) }
      )

    case "NfcTransmit":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Rpc_NfcTransmitRequest>(),
        responseSerializer: ProtobufSerializer<Rpc_NfcTransmitResponse>(),
        interceptors: self.interceptors?.makeNfcTransmitInterceptors() ?? [],
        wrapping: { try await self.nfcTransmit(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

internal protocol Rpc_WalletServiceServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'deleteWallet'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDeleteWalletInterceptors() -> [ServerInterceptor<Rpc_EmptyMessage, Rpc_OperationStatus>]

  /// - Returns: Interceptors to use when handling 'nfcTransmit'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeNfcTransmitInterceptors() -> [ServerInterceptor<Rpc_NfcTransmitRequest, Rpc_NfcTransmitResponse>]
}

internal enum Rpc_WalletServiceServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "WalletService",
    fullName: "rpc.WalletService",
    methods: [
      Rpc_WalletServiceServerMetadata.Methods.deleteWallet,
      Rpc_WalletServiceServerMetadata.Methods.nfcTransmit,
    ]
  )

  internal enum Methods {
    internal static let deleteWallet = GRPCMethodDescriptor(
      name: "DeleteWallet",
      path: "/rpc.WalletService/DeleteWallet",
      type: GRPCCallType.unary
    )

    internal static let nfcTransmit = GRPCMethodDescriptor(
      name: "NfcTransmit",
      path: "/rpc.WalletService/NfcTransmit",
      type: GRPCCallType.unary
    )
  }
}
